@page "/employees"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using EmployeeManager.Data
@using EmployeeManager.Data
@implements IAsyncDisposable
@inject IDbContextFactory<EmployeeManager.Data.EmployeeManagerDbContext> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="employees/create">Create New</a>
</p>



<QuickGrid Class="table" Items="employees" Pagination="paginationState">
    <PropertyColumn Property="employee => employee.FirstName" Sortable="true" Title="First name">
        <ColumnOptions>
            <input type="search" class="form-control" @bind="firstNameFilter" @bind:event="oninput" autofocus/>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="employee => employee.LastName" Sortable="true" Title="Last name" />
    <PropertyColumn Property="employee => employee.IsDeveloper" Title="Developer?" />
    <PropertyColumn Property="employee => employee.Department!.Name" Title="Department" />

    <TemplateColumn Context="employee">
        <a href="@($"employees/edit?id={employee.Id}")">Edit</a> |
        <a href="@($"employees/details?id={employee.Id}")">Details</a> |
        <a href="@($"employees/delete?id={employee.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="paginationState"/>

@code {
    PaginationState paginationState = new PaginationState {
        ItemsPerPage = 4
    };
    private EmployeeManagerDbContext context = default!;

    private string firstNameFilter = string.Empty;
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    IQueryable<Employee> employees => DbFactory.CreateDbContext().Employee
        .Include(d => d.Department)
        .Where(e => e.FirstName!.ToLower().Contains(firstNameFilter.ToLower()));

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
